# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class Employee(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, first_name: str=None, last_name: str=None, street: str=None, house_number: str=None, postal_code: str=None, city: str=None, state: str=None):  # noqa: E501
        """Employee - a model defined in Swagger

        :param id: The id of this Employee.  # noqa: E501
        :type id: str
        :param first_name: The first_name of this Employee.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Employee.  # noqa: E501
        :type last_name: str
        :param street: The street of this Employee.  # noqa: E501
        :type street: str
        :param house_number: The house_number of this Employee.  # noqa: E501
        :type house_number: str
        :param postal_code: The postal_code of this Employee.  # noqa: E501
        :type postal_code: str
        :param city: The city of this Employee.  # noqa: E501
        :type city: str
        :param state: The state of this Employee.  # noqa: E501
        :type state: str
        """
        self.swagger_types = {
            'id': str,
            'first_name': str,
            'last_name': str,
            'street': str,
            'house_number': str,
            'postal_code': str,
            'city': str,
            'state': str
        }

        self.attribute_map = {
            'id': 'id',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'street': 'street',
            'house_number': 'houseNumber',
            'postal_code': 'postalCode',
            'city': 'city',
            'state': 'state'
        }
        self._id = id
        self._first_name = first_name
        self._last_name = last_name
        self._street = street
        self._house_number = house_number
        self._postal_code = postal_code
        self._city = city
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The employee of this Employee.  # noqa: E501
        :rtype: Employee
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Employee.


        :return: The id of this Employee.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Employee.


        :param id: The id of this Employee.
        :type id: str
        """

        self._id = id

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Employee.


        :return: The first_name of this Employee.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Employee.


        :param first_name: The first_name of this Employee.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Employee.


        :return: The last_name of this Employee.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Employee.


        :param last_name: The last_name of this Employee.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def street(self) -> str:
        """Gets the street of this Employee.


        :return: The street of this Employee.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this Employee.


        :param street: The street of this Employee.
        :type street: str
        """

        self._street = street

    @property
    def house_number(self) -> str:
        """Gets the house_number of this Employee.


        :return: The house_number of this Employee.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number: str):
        """Sets the house_number of this Employee.


        :param house_number: The house_number of this Employee.
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this Employee.


        :return: The postal_code of this Employee.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this Employee.


        :param postal_code: The postal_code of this Employee.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def city(self) -> str:
        """Gets the city of this Employee.


        :return: The city of this Employee.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Employee.


        :param city: The city of this Employee.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Employee.


        :return: The state of this Employee.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Employee.


        :param state: The state of this Employee.
        :type state: str
        """

        self._state = state
