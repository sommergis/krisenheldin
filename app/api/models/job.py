# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api.models.job_location import JobLocation  # noqa: F401,E501
from api import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, employer_id: int=None, default_image_picture_id: int=None, description: str=None, salary_hourly: float=None, work_hours_per_day: float=None, work_days_per_week: float=None, accommodation_available: bool=None, acommodation_cost_per_day: float=None, with_meals: bool=None, meal_cost_per_day: float=None, spoken_languages: str=None, location: JobLocation=None, location_description: str=None, start_date: date=None, end_date: date=None, special_requirements: str=None, contingent: float=None, is_active: bool=None, visible_from: date=None, visible_to: date=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.  # noqa: E501
        :type id: int
        :param employer_id: The employer_id of this Job.  # noqa: E501
        :type employer_id: int
        :param default_image_picture_id: The default_image_picture_id of this Job.  # noqa: E501
        :type default_image_picture_id: int
        :param description: The description of this Job.  # noqa: E501
        :type description: str
        :param salary_hourly: The salary_hourly of this Job.  # noqa: E501
        :type salary_hourly: float
        :param work_hours_per_day: The work_hours_per_day of this Job.  # noqa: E501
        :type work_hours_per_day: float
        :param work_days_per_week: The work_days_per_week of this Job.  # noqa: E501
        :type work_days_per_week: float
        :param accommodation_available: The accommodation_available of this Job.  # noqa: E501
        :type accommodation_available: bool
        :param acommodation_cost_per_day: The acommodation_cost_per_day of this Job.  # noqa: E501
        :type acommodation_cost_per_day: float
        :param with_meals: The with_meals of this Job.  # noqa: E501
        :type with_meals: bool
        :param meal_cost_per_day: The meal_cost_per_day of this Job.  # noqa: E501
        :type meal_cost_per_day: float
        :param spoken_languages: The spoken_languages of this Job.  # noqa: E501
        :type spoken_languages: str
        :param location: The location of this Job.  # noqa: E501
        :type location: JobLocation
        :param location_description: The location_description of this Job.  # noqa: E501
        :type location_description: str
        :param start_date: The start_date of this Job.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this Job.  # noqa: E501
        :type end_date: date
        :param special_requirements: The special_requirements of this Job.  # noqa: E501
        :type special_requirements: str
        :param contingent: The contingent of this Job.  # noqa: E501
        :type contingent: float
        :param is_active: The is_active of this Job.  # noqa: E501
        :type is_active: bool
        :param visible_from: The visible_from of this Job.  # noqa: E501
        :type visible_from: date
        :param visible_to: The visible_to of this Job.  # noqa: E501
        :type visible_to: date
        """
        self.swagger_types = {
            'id': int,
            'employer_id': int,
            'default_image_picture_id': int,
            'description': str,
            'salary_hourly': float,
            'work_hours_per_day': float,
            'work_days_per_week': float,
            'accommodation_available': bool,
            'acommodation_cost_per_day': float,
            'with_meals': bool,
            'meal_cost_per_day': float,
            'spoken_languages': str,
            'location': JobLocation,
            'location_description': str,
            'start_date': date,
            'end_date': date,
            'special_requirements': str,
            'contingent': float,
            'is_active': bool,
            'visible_from': date,
            'visible_to': date
        }

        self.attribute_map = {
            'id': 'id',
            'employer_id': 'employerId',
            'default_image_picture_id': 'defaultImagePictureId',
            'description': 'description',
            'salary_hourly': 'salaryHourly',
            'work_hours_per_day': 'workHoursPerDay',
            'work_days_per_week': 'workDaysPerWeek',
            'accommodation_available': 'accommodationAvailable',
            'acommodation_cost_per_day': 'acommodationCostPerDay',
            'with_meals': 'withMeals',
            'meal_cost_per_day': 'mealCostPerDay',
            'spoken_languages': 'spokenLanguages',
            'location': 'location',
            'location_description': 'locationDescription',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'special_requirements': 'specialRequirements',
            'contingent': 'contingent',
            'is_active': 'isActive',
            'visible_from': 'visibleFrom',
            'visible_to': 'visibleTo'
        }
        self._id = id
        self._employer_id = employer_id
        self._default_image_picture_id = default_image_picture_id
        self._description = description
        self._salary_hourly = salary_hourly
        self._work_hours_per_day = work_hours_per_day
        self._work_days_per_week = work_days_per_week
        self._accommodation_available = accommodation_available
        self._acommodation_cost_per_day = acommodation_cost_per_day
        self._with_meals = with_meals
        self._meal_cost_per_day = meal_cost_per_day
        self._spoken_languages = spoken_languages
        self._location = location
        self._location_description = location_description
        self._start_date = start_date
        self._end_date = end_date
        self._special_requirements = special_requirements
        self._contingent = contingent
        self._is_active = is_active
        self._visible_from = visible_from
        self._visible_to = visible_to

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Job.


        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Job.


        :param id: The id of this Job.
        :type id: int
        """

        self._id = id

    @property
    def employer_id(self) -> int:
        """Gets the employer_id of this Job.


        :return: The employer_id of this Job.
        :rtype: int
        """
        return self._employer_id

    @employer_id.setter
    def employer_id(self, employer_id: int):
        """Sets the employer_id of this Job.


        :param employer_id: The employer_id of this Job.
        :type employer_id: int
        """

        self._employer_id = employer_id

    @property
    def default_image_picture_id(self) -> int:
        """Gets the default_image_picture_id of this Job.


        :return: The default_image_picture_id of this Job.
        :rtype: int
        """
        return self._default_image_picture_id

    @default_image_picture_id.setter
    def default_image_picture_id(self, default_image_picture_id: int):
        """Sets the default_image_picture_id of this Job.


        :param default_image_picture_id: The default_image_picture_id of this Job.
        :type default_image_picture_id: int
        """

        self._default_image_picture_id = default_image_picture_id

    @property
    def description(self) -> str:
        """Gets the description of this Job.


        :return: The description of this Job.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Job.


        :param description: The description of this Job.
        :type description: str
        """

        self._description = description

    @property
    def salary_hourly(self) -> float:
        """Gets the salary_hourly of this Job.


        :return: The salary_hourly of this Job.
        :rtype: float
        """
        return self._salary_hourly

    @salary_hourly.setter
    def salary_hourly(self, salary_hourly: float):
        """Sets the salary_hourly of this Job.


        :param salary_hourly: The salary_hourly of this Job.
        :type salary_hourly: float
        """

        self._salary_hourly = salary_hourly

    @property
    def work_hours_per_day(self) -> float:
        """Gets the work_hours_per_day of this Job.


        :return: The work_hours_per_day of this Job.
        :rtype: float
        """
        return self._work_hours_per_day

    @work_hours_per_day.setter
    def work_hours_per_day(self, work_hours_per_day: float):
        """Sets the work_hours_per_day of this Job.


        :param work_hours_per_day: The work_hours_per_day of this Job.
        :type work_hours_per_day: float
        """

        self._work_hours_per_day = work_hours_per_day

    @property
    def work_days_per_week(self) -> float:
        """Gets the work_days_per_week of this Job.


        :return: The work_days_per_week of this Job.
        :rtype: float
        """
        return self._work_days_per_week

    @work_days_per_week.setter
    def work_days_per_week(self, work_days_per_week: float):
        """Sets the work_days_per_week of this Job.


        :param work_days_per_week: The work_days_per_week of this Job.
        :type work_days_per_week: float
        """

        self._work_days_per_week = work_days_per_week

    @property
    def accommodation_available(self) -> bool:
        """Gets the accommodation_available of this Job.


        :return: The accommodation_available of this Job.
        :rtype: bool
        """
        return self._accommodation_available

    @accommodation_available.setter
    def accommodation_available(self, accommodation_available: bool):
        """Sets the accommodation_available of this Job.


        :param accommodation_available: The accommodation_available of this Job.
        :type accommodation_available: bool
        """

        self._accommodation_available = accommodation_available

    @property
    def acommodation_cost_per_day(self) -> float:
        """Gets the acommodation_cost_per_day of this Job.


        :return: The acommodation_cost_per_day of this Job.
        :rtype: float
        """
        return self._acommodation_cost_per_day

    @acommodation_cost_per_day.setter
    def acommodation_cost_per_day(self, acommodation_cost_per_day: float):
        """Sets the acommodation_cost_per_day of this Job.


        :param acommodation_cost_per_day: The acommodation_cost_per_day of this Job.
        :type acommodation_cost_per_day: float
        """

        self._acommodation_cost_per_day = acommodation_cost_per_day

    @property
    def with_meals(self) -> bool:
        """Gets the with_meals of this Job.


        :return: The with_meals of this Job.
        :rtype: bool
        """
        return self._with_meals

    @with_meals.setter
    def with_meals(self, with_meals: bool):
        """Sets the with_meals of this Job.


        :param with_meals: The with_meals of this Job.
        :type with_meals: bool
        """

        self._with_meals = with_meals

    @property
    def meal_cost_per_day(self) -> float:
        """Gets the meal_cost_per_day of this Job.


        :return: The meal_cost_per_day of this Job.
        :rtype: float
        """
        return self._meal_cost_per_day

    @meal_cost_per_day.setter
    def meal_cost_per_day(self, meal_cost_per_day: float):
        """Sets the meal_cost_per_day of this Job.


        :param meal_cost_per_day: The meal_cost_per_day of this Job.
        :type meal_cost_per_day: float
        """

        self._meal_cost_per_day = meal_cost_per_day

    @property
    def spoken_languages(self) -> str:
        """Gets the spoken_languages of this Job.


        :return: The spoken_languages of this Job.
        :rtype: str
        """
        return self._spoken_languages

    @spoken_languages.setter
    def spoken_languages(self, spoken_languages: str):
        """Sets the spoken_languages of this Job.


        :param spoken_languages: The spoken_languages of this Job.
        :type spoken_languages: str
        """

        self._spoken_languages = spoken_languages

    @property
    def location(self) -> JobLocation:
        """Gets the location of this Job.


        :return: The location of this Job.
        :rtype: JobLocation
        """
        return self._location

    @location.setter
    def location(self, location: JobLocation):
        """Sets the location of this Job.


        :param location: The location of this Job.
        :type location: JobLocation
        """

        self._location = location

    @property
    def location_description(self) -> str:
        """Gets the location_description of this Job.


        :return: The location_description of this Job.
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description: str):
        """Sets the location_description of this Job.


        :param location_description: The location_description of this Job.
        :type location_description: str
        """

        self._location_description = location_description

    @property
    def start_date(self) -> date:
        """Gets the start_date of this Job.


        :return: The start_date of this Job.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this Job.


        :param start_date: The start_date of this Job.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this Job.


        :return: The end_date of this Job.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this Job.


        :param end_date: The end_date of this Job.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def special_requirements(self) -> str:
        """Gets the special_requirements of this Job.


        :return: The special_requirements of this Job.
        :rtype: str
        """
        return self._special_requirements

    @special_requirements.setter
    def special_requirements(self, special_requirements: str):
        """Sets the special_requirements of this Job.


        :param special_requirements: The special_requirements of this Job.
        :type special_requirements: str
        """

        self._special_requirements = special_requirements

    @property
    def contingent(self) -> float:
        """Gets the contingent of this Job.


        :return: The contingent of this Job.
        :rtype: float
        """
        return self._contingent

    @contingent.setter
    def contingent(self, contingent: float):
        """Sets the contingent of this Job.


        :param contingent: The contingent of this Job.
        :type contingent: float
        """

        self._contingent = contingent

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Job.


        :return: The is_active of this Job.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Job.


        :param is_active: The is_active of this Job.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def visible_from(self) -> date:
        """Gets the visible_from of this Job.


        :return: The visible_from of this Job.
        :rtype: date
        """
        return self._visible_from

    @visible_from.setter
    def visible_from(self, visible_from: date):
        """Sets the visible_from of this Job.


        :param visible_from: The visible_from of this Job.
        :type visible_from: date
        """

        self._visible_from = visible_from

    @property
    def visible_to(self) -> date:
        """Gets the visible_to of this Job.


        :return: The visible_to of this Job.
        :rtype: date
        """
        return self._visible_to

    @visible_to.setter
    def visible_to(self, visible_to: date):
        """Sets the visible_to of this Job.


        :param visible_to: The visible_to of this Job.
        :type visible_to: date
        """

        self._visible_to = visible_to
